package org.springframework.kdb.domain.jdbc;

import java.sql.*;

import static org.springframework.kdb.domain.jdbc.jdbc.q;

public class st implements Statement {
    protected Object[] p = { };
    //4
    boolean poolable = false;
    //1.7
    boolean _closeOnCompletion = false;
    private co co;
    private Object r;
    private int R, T;
    
    public st(co x) {
        co = x;
    }
    
    public int executeUpdate(String s) throws SQLException {
        co.ex(s, p);
        return -1;
    }
    
    public ResultSet executeQuery(String s) throws SQLException {
        return new rs(this, co.ex(s, p));
    }
    
    public boolean execute(String s) throws SQLException {
        return null != (r = co.ex(s, p));
    }
    
    public ResultSet getResultSet() throws SQLException {
        return new rs(this, r);
    }
    
    public int getUpdateCount() {
        return -1;
    }
    
    public int getMaxRows() throws SQLException {
        return R;
    }
    
    public void setMaxRows(int i) throws SQLException {
        R = i;
    }
    
    public int getQueryTimeout() throws SQLException {
        return T;
    }
    
    public void setQueryTimeout(int i) throws SQLException {
        T = i;
    }
    
    // truncate excess BINARY,VARBINARY,LONGVARBINARY,CHAR,VARCHAR,and LONGVARCHAR fields
    public int getMaxFieldSize() throws SQLException {
        return 0;
    }
    
    public void setMaxFieldSize(int i) throws SQLException {
    }
    
    public void setEscapeProcessing(boolean b) throws SQLException {
    }
    
    public void cancel() throws SQLException {
    }
    
    public SQLWarning getWarnings() throws SQLException {
        return null;
    }
    
    public void clearWarnings() throws SQLException {
    }
    
    // positioned update? different statement?
    public void setCursorName(String name) throws SQLException {
        q("cur");
    }
    
    public boolean getMoreResults() throws SQLException {
        return false;
    }
    
    public void close() throws SQLException {
        co = null;
    }
    
    public int getFetchDirection() throws SQLException {
        return 0;
    }
    
    public void setFetchDirection(int direction) throws SQLException {
        q("fd");
    }
    
    public int getFetchSize() throws SQLException {
        return 0;
    }
    
    public void setFetchSize(int rows) throws SQLException {
    }
    
    public int getResultSetConcurrency() throws SQLException {
        return rs.CONCUR_READ_ONLY;
    }
    
    public int getResultSetType() throws SQLException {
        return rs.TYPE_SCROLL_INSENSITIVE;
    }
    
    public void addBatch(String sql) throws SQLException {
        q("bat");
    }
    
    public void clearBatch() throws SQLException {
    }
    
    public int[] executeBatch() throws SQLException {
        return new int[0];
    }
    
    public Connection getConnection() throws SQLException {
        return co;
    }
    
    //3
    public boolean getMoreResults(int current) throws SQLException {
        return false;
    }
    
    public ResultSet getGeneratedKeys() throws SQLException {
        return null;
    }
    
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        q("a");
        return 0;
    }
    
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        q("a");
        return 0;
    }
    
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        q("a");
        return 0;
    }
    
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        q("a");
        return false;
    }
    
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        q("a");
        return false;
    }
    
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        q("a");
        return false;
    }
    
    public int getResultSetHoldability() throws SQLException {
        return rs.HOLD_CURSORS_OVER_COMMIT;
    }
    
    public boolean isClosed() throws SQLException {
        return co == null || co.isClosed();
    }
    
    public boolean isPoolable() throws SQLException {
        if (isClosed()) throw new SQLException("Closed");
        return poolable;
    }
    
    public void setPoolable(boolean b) throws SQLException {
        if (isClosed()) throw new SQLException("Closed");
        poolable = b;
    }
    
    public <T> T unwrap(Class<T> type) throws SQLException {
        q();
        return null;
    }
    
    public boolean isWrapperFor(Class<?> type) throws SQLException {
        q();
        return false;
    }
    
    public void closeOnCompletion() {
        _closeOnCompletion = true;
    }
    
    public boolean isCloseOnCompletion() {
        return _closeOnCompletion;
    }
}

